/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.demo.folderviewer;

import java.io.File;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.explorer.view.ListView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.demo.folderviewer//FolderViewer//EN",
autostore = false)
public final class FolderViewerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static ExplorerManager em = new ExplorerManager();
    private static FolderViewerTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "FolderViewerTopComponent";

    public FolderViewerTopComponent() {
        initComponents();
        initToolbar();
        setName(NbBundle.getMessage(FolderViewerTopComponent.class, "CTL_FolderViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(FolderViewerTopComponent.class, "HINT_FolderViewerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        associateLookup(ExplorerUtils.createLookup(em, this.getActionMap()));        
        
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //File root=new File("C://");
                File root=new File("//home//edwin");
                FolderNode rootNode=FolderNode.getRootNode(FileUtil.toFileObject(root));
                em.setRootContext(rootNode);
            }
        });
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        folderViewToolbar = new javax.swing.JToolBar();
        folderViewPanel = new javax.swing.JPanel();
        jScrollPane1 = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        folderViewToolbar.setFloatable(false);
        folderViewToolbar.setRollover(true);
        add(folderViewToolbar, java.awt.BorderLayout.NORTH);

        folderViewPanel.setLayout(new java.awt.BorderLayout());
        folderViewPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(folderViewPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel folderViewPanel;
    private javax.swing.JToolBar folderViewToolbar;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized FolderViewerTopComponent getDefault() {
        if (instance == null) {
            instance = new FolderViewerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the FolderViewerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized FolderViewerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(FolderViewerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof FolderViewerTopComponent) {
            return (FolderViewerTopComponent) win;
        }
        Logger.getLogger(FolderViewerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    private void setViewMode(JScrollPane sp){
        folderViewPanel.remove(jScrollPane1);
        jScrollPane1=sp;
        folderViewPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        folderViewPanel.validate();
    }
    
    public void setTreeViewMode() {
        setViewMode(new BeanTreeView());
    }
    
    
    private void initToolbar(){
        List<? extends Action> alist = Utilities.actionsForPath("Toolbars/FolderViewToolbar");
        for (Action action : alist) {
            this.folderViewToolbar.add(action);
        }
    }

    public void setTabbedViewMode() {
        setViewMode(new ListView());
    }
}
